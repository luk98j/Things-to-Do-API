/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.whatsupdev.GradeFood.controller;

import com.whatsupdev.GradeFood.model.Error;
import com.whatsupdev.GradeFood.model.LoginUserRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-09T23:00:03.137099500+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "authorization", description = "the authorization API")
public interface AuthorizationApi {

    /**
     * POST /authorization/login : Login user
     *
     * @param loginUserRequest Body of login user request (required)
     * @return User is correctly logged in (status code 200)
     *         or User already log in (status code 403)
     *         or User not found (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "authorizationLoginPost",
        summary = "Login user",
        tags = { "authorization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User is correctly logged in", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "User already log in", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/authorization/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Object> authorizationLoginPost(
        @Parameter(name = "LoginUserRequest", description = "Body of login user request", required = true) @Valid @RequestBody LoginUserRequest loginUserRequest
    );


    /**
     * POST /authorization/register/confirm : Confirm registration of user (Part 2)
     *
     * @param body Body of approval registration object (optional)
     * @return User is correctly register (status code 200)
     *         or Wrong user data (status code 400)
     *         or User already exists (status code 403)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "authorizationRegisterConfirmPost",
        summary = "Confirm registration of user (Part 2)",
        tags = { "authorization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User is correctly register", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Wrong user data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "User already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/authorization/register/confirm",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Object> authorizationRegisterConfirmPost(
        @Parameter(name = "body", description = "Body of approval registration object") @Valid @RequestBody(required = false) Object body
    );


    /**
     * POST /authorization/register : Register user (Part 1)
     *
     * @param body Body of registration object (optional)
     * @return User is correctly register (status code 201)
     *         or Wrong user data (status code 400)
     *         or User already exists (status code 403)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "authorizationRegisterPost",
        summary = "Register user (Part 1)",
        tags = { "authorization" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User is correctly register", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Wrong user data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "User already exists", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/authorization/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Object> authorizationRegisterPost(
        @Parameter(name = "body", description = "Body of registration object") @Valid @RequestBody(required = false) Object body
    );


    /**
     * DELETE /authorization/unregister/confirm : Confirm unregistration of user
     *
     * @param body Body of confirmation unregistration object (optional)
     * @return User correctly unregister (status code 200)
     *         or User not authorized (status code 403)
     *         or User not found (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "authorizationUnregisterConfirmDelete",
        summary = "Confirm unregistration of user",
        tags = { "authorization" },
        responses = {
            @ApiResponse(responseCode = "200", description = "User correctly unregister", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "User not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/authorization/unregister/confirm",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Object> authorizationUnregisterConfirmDelete(
        @Parameter(name = "body", description = "Body of confirmation unregistration object") @Valid @RequestBody(required = false) Object body
    );


    /**
     * DELETE /authorization/unregister : Unregister user part 1
     *
     * @param body Body of unregistration object (optional)
     * @return User correctly unregister (status code 201)
     *         or User not authorized (status code 403)
     *         or User not found (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "authorizationUnregisterDelete",
        summary = "Unregister user part 1",
        tags = { "authorization" },
        responses = {
            @ApiResponse(responseCode = "201", description = "User correctly unregister", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "User not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "User not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/authorization/unregister",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Object> authorizationUnregisterDelete(
        @Parameter(name = "body", description = "Body of unregistration object") @Valid @RequestBody(required = false) Object body
    );

}
