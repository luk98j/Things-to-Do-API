/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.whatsupdev.GradeFood.controller;

import com.whatsupdev.GradeFood.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-09T23:00:03.137099500+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "food-posts", description = "the food-posts API")
public interface FoodPostsApi {

    /**
     * DELETE /food-posts/action-on-post/{post-id} : Endpoint for action on post (like, comment)
     *
     * @param postId Unique id of post (required)
     * @param body Body of action on post object (optional)
     * @return Action of post successful (status code 200)
     *         or User not authorized (status code 403)
     *         or Data not found (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "foodPostsActionOnPostPostIdDelete",
        summary = "Endpoint for action on post (like, comment)",
        tags = { "food-posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Action of post successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "User not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/food-posts/action-on-post/{post-id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Object> foodPostsActionOnPostPostIdDelete(
        @Parameter(name = "post-id", description = "Unique id of post", required = true, in = ParameterIn.PATH) @PathVariable("post-id") String postId,
        @Parameter(name = "body", description = "Body of action on post object") @Valid @RequestBody(required = false) Object body
    );


    /**
     * POST /food-posts/add-post : Post object with food
     *
     * @param body Body of new post object (optional)
     * @return Correctly added post (status code 200)
     *         or User not authorized (status code 403)
     *         or Data not found (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "foodPostsAddPostPost",
        summary = "Post object with food",
        tags = { "food-posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Correctly added post", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "User not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/food-posts/add-post",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Object> foodPostsAddPostPost(
        @Parameter(name = "body", description = "Body of new post object") @Valid @RequestBody(required = false) Object body
    );


    /**
     * DELETE /food-posts/delete-post/{post-id} : Delete object with data about food
     *
     * @param postId Unique id of post (required)
     * @return Deletion of post sucesful (status code 200)
     *         or User not authorized (status code 403)
     *         or Data not found (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "foodPostsDeletePostPostIdDelete",
        summary = "Delete object with data about food",
        tags = { "food-posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Deletion of post sucesful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "User not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/food-posts/delete-post/{post-id}",
        produces = { "application/json" }
    )
    ResponseEntity<Object> foodPostsDeletePostPostIdDelete(
        @Parameter(name = "post-id", description = "Unique id of post", required = true, in = ParameterIn.PATH) @PathVariable("post-id") String postId
    );


    /**
     * GET /food-posts/get-all-posts/{cordinationX}/{cordinationY} : Get all posts for user in area
     *
     * @param cordinationX Cordination of user X (required)
     * @param cordinationY Cordination of user Y (required)
     * @return List with all posts (status code 200)
     *         or User not authorized (status code 403)
     *         or Data not found (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "foodPostsGetAllPostsCordinationXCordinationYGet",
        summary = "Get all posts for user in area",
        tags = { "food-posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List with all posts", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Object.class)))
            }),
            @ApiResponse(responseCode = "403", description = "User not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/food-posts/get-all-posts/{cordinationX}/{cordinationY}",
        produces = { "application/json" }
    )
    ResponseEntity<List<Object>> foodPostsGetAllPostsCordinationXCordinationYGet(
        @Parameter(name = "cordinationX", description = "Cordination of user X", required = true, in = ParameterIn.PATH) @PathVariable("cordinationX") Integer cordinationX,
        @Parameter(name = "cordinationY", description = "Cordination of user Y", required = true, in = ParameterIn.PATH) @PathVariable("cordinationY") Integer cordinationY
    );


    /**
     * PUT /food-posts/update-post/{post-id} : Update post of food
     *
     * @param postId Unique id of post (required)
     * @param body Body of edit post object (optional)
     * @return Updated post (status code 200)
     *         or User not authorized (status code 403)
     *         or Data not found (status code 404)
     *         or Unexpected error (status code 500)
     */
    @Operation(
        operationId = "foodPostsUpdatePostPostIdPut",
        summary = "Update post of food",
        tags = { "food-posts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated post", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "403", description = "User not authorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Data not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Unexpected error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/food-posts/update-post/{post-id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<Object> foodPostsUpdatePostPostIdPut(
        @Parameter(name = "post-id", description = "Unique id of post", required = true, in = ParameterIn.PATH) @PathVariable("post-id") String postId,
        @Parameter(name = "body", description = "Body of edit post object") @Valid @RequestBody(required = false) Object body
    );

}
